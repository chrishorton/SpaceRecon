// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package PLD

import (
	flatbuffers "github.com/google/flatbuffers/go"

	IDM "github.com/chrishorton/spacerecon/pkg/flatbuffers/IDM"
)

/// Payload Information
type PLD struct {
	_tab flatbuffers.Table
}

const PLDIdentifier = "$PLD"

func GetRootAsPLD(buf []byte, offset flatbuffers.UOffsetT) *PLD {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PLD{}
	x.Init(buf, n+offset)
	return x
}

func FinishPLDBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(PLDIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func PLDBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, PLDIdentifier)
}

func GetSizePrefixedRootAsPLD(buf []byte, offset flatbuffers.UOffsetT) *PLD {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PLD{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPLDBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(PLDIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedPLDBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, PLDIdentifier)
}

func (rcv *PLD) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PLD) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PLD) PayloadDuration() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PLD) MassAtLaunch() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *PLD) MutateMassAtLaunch(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *PLD) Dimensions() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PLD) SolarArrayArea() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *PLD) MutateSolarArrayArea(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func (rcv *PLD) SolarArrayDimensions() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PLD) NominalOperationalLifetime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PLD) Instruments(obj *IDM.IDM, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *PLD) InstrumentsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func PLDStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func PLDAddPayloadDuration(builder *flatbuffers.Builder, payloadDuration flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(payloadDuration), 0)
}
func PLDAddMassAtLaunch(builder *flatbuffers.Builder, massAtLaunch float32) {
	builder.PrependFloat32Slot(1, massAtLaunch, 0.0)
}
func PLDAddDimensions(builder *flatbuffers.Builder, dimensions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(dimensions), 0)
}
func PLDAddSolarArrayArea(builder *flatbuffers.Builder, solarArrayArea float32) {
	builder.PrependFloat32Slot(3, solarArrayArea, 0.0)
}
func PLDAddSolarArrayDimensions(builder *flatbuffers.Builder, solarArrayDimensions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(solarArrayDimensions), 0)
}
func PLDAddNominalOperationalLifetime(builder *flatbuffers.Builder, nominalOperationalLifetime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(nominalOperationalLifetime), 0)
}
func PLDAddInstruments(builder *flatbuffers.Builder, instruments flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(instruments), 0)
}
func PLDStartInstrumentsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func PLDEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
