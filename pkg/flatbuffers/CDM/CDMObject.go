// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package CDM

import (
	flatbuffers "github.com/google/flatbuffers/go"

	EPM "github.com/chrishorton/spacerecon/pkg/flatbuffers/EPM"
	CAT "github.com/chrishorton/spacerecon/pkg/flatbuffers/CAT"
	RFM "github.com/chrishorton/spacerecon/pkg/flatbuffers/RFM"
)

type CDMObject struct {
	_tab flatbuffers.Table
}

func GetRootAsCDMObject(buf []byte, offset flatbuffers.UOffsetT) *CDMObject {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CDMObject{}
	x.Init(buf, n+offset)
	return x
}

func FinishCDMObjectBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsCDMObject(buf []byte, offset flatbuffers.UOffsetT) *CDMObject {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CDMObject{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCDMObjectBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *CDMObject) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CDMObject) Table() flatbuffers.Table {
	return rcv._tab
}

/// A comment
func (rcv *CDMObject) Comment() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A comment
func (rcv *CDMObject) Object(obj *CAT.CAT) *CAT.CAT {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(CAT.CAT)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// Point of Contact
func (rcv *CDMObject) Poc(obj *EPM.EPM) *EPM.EPM {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(EPM.EPM)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// Point of Contact
/// Operator contact position
func (rcv *CDMObject) OperatorContactPosition() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Operator contact position
/// Operator organization
func (rcv *CDMObject) OperatorOrganization() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Operator organization
/// Ephemeris name
func (rcv *CDMObject) EphemerisName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Ephemeris name
/// Covariance method
func (rcv *CDMObject) CovarianceMethod() covarianceMethod {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return covarianceMethod(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Covariance method
func (rcv *CDMObject) MutateCovarianceMethod(n covarianceMethod) bool {
	return rcv._tab.MutateInt8Slot(16, int8(n))
}

/// Reference Frame in which the object position is defined
func (rcv *CDMObject) ReferenceFrame() RFM.RefFrame {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return RFM.RefFrame(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Reference Frame in which the object position is defined
func (rcv *CDMObject) MutateReferenceFrame(n RFM.RefFrame) bool {
	return rcv._tab.MutateInt8Slot(18, int8(n))
}

/// Gravity model
func (rcv *CDMObject) GravityModel() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Gravity model
/// Atmospheric model
func (rcv *CDMObject) AtmosphericModel() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Atmospheric model
/// N-body perturbations
func (rcv *CDMObject) NBodyPerturbations() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// N-body perturbations
/// Solar radiation pressure
func (rcv *CDMObject) SolarRadPressure() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Solar radiation pressure
func (rcv *CDMObject) MutateSolarRadPressure(n bool) bool {
	return rcv._tab.MutateBoolSlot(26, n)
}

/// Earth tides
func (rcv *CDMObject) EarthTides() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Earth tides
func (rcv *CDMObject) MutateEarthTides(n bool) bool {
	return rcv._tab.MutateBoolSlot(28, n)
}

/// Intrack thrust
func (rcv *CDMObject) IntrackThrust() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Intrack thrust
func (rcv *CDMObject) MutateIntrackThrust(n bool) bool {
	return rcv._tab.MutateBoolSlot(30, n)
}

/// Time of last observation start
func (rcv *CDMObject) TimeLastobStart() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time of last observation start
/// Time of last observation end
func (rcv *CDMObject) TimeLastobEnd() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time of last observation end
/// Recommended observation data span
func (rcv *CDMObject) RecommendedOdSpan() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Recommended observation data span
func (rcv *CDMObject) MutateRecommendedOdSpan(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Actual observation data span
func (rcv *CDMObject) ActualOdSpan() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Actual observation data span
func (rcv *CDMObject) MutateActualOdSpan(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// Number of observations available
func (rcv *CDMObject) ObsAvailable() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of observations available
func (rcv *CDMObject) MutateObsAvailable(n uint32) bool {
	return rcv._tab.MutateUint32Slot(40, n)
}

/// Number of observations used
func (rcv *CDMObject) ObsUsed() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of observations used
func (rcv *CDMObject) MutateObsUsed(n uint32) bool {
	return rcv._tab.MutateUint32Slot(42, n)
}

/// Number of tracks available
func (rcv *CDMObject) TracksAvailable() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of tracks available
func (rcv *CDMObject) MutateTracksAvailable(n uint32) bool {
	return rcv._tab.MutateUint32Slot(44, n)
}

/// Number of tracks used
func (rcv *CDMObject) TracksUsed() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of tracks used
func (rcv *CDMObject) MutateTracksUsed(n uint32) bool {
	return rcv._tab.MutateUint32Slot(46, n)
}

/// Residuals accepted
func (rcv *CDMObject) ResidualsAccepted() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Residuals accepted
func (rcv *CDMObject) MutateResidualsAccepted(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// Weighted root mean square
func (rcv *CDMObject) WeightedRms() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Weighted root mean square
func (rcv *CDMObject) MutateWeightedRms(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Area of the object
func (rcv *CDMObject) AreaPc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Area of the object
func (rcv *CDMObject) MutateAreaPc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Area of the object drag
func (rcv *CDMObject) AreaDrg() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Area of the object drag
func (rcv *CDMObject) MutateAreaDrg(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Area of the object solar radiation pressure
func (rcv *CDMObject) AreaSrp() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Area of the object solar radiation pressure
func (rcv *CDMObject) MutateAreaSrp(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// Object's area-to-mass ratio
func (rcv *CDMObject) CrAreaOverMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Object's area-to-mass ratio
func (rcv *CDMObject) MutateCrAreaOverMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// Object's thrust acceleration
func (rcv *CDMObject) ThrustAcceleration() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Object's thrust acceleration
func (rcv *CDMObject) MutateThrustAcceleration(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// Object's solar flux
func (rcv *CDMObject) Sedr() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Object's solar flux
func (rcv *CDMObject) MutateSedr(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// X-coordinate of the object's position in RTN coordinates
func (rcv *CDMObject) X() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// X-coordinate of the object's position in RTN coordinates
func (rcv *CDMObject) MutateX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// Y-coordinate of the object's position in RTN
func (rcv *CDMObject) Y() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Y-coordinate of the object's position in RTN
func (rcv *CDMObject) MutateY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// Z-coordinate of the object's position in RTN
func (rcv *CDMObject) Z() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Z-coordinate of the object's position in RTN
func (rcv *CDMObject) MutateZ(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// X-coordinate of the object's position in RTN coordinates
func (rcv *CDMObject) XDot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// X-coordinate of the object's position in RTN coordinates
func (rcv *CDMObject) MutateXDot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(70, n)
}

/// Y-coordinate of the object's position in RTN
func (rcv *CDMObject) YDot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Y-coordinate of the object's position in RTN
func (rcv *CDMObject) MutateYDot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(72, n)
}

/// Z-coordinate of the object's position in RTN
func (rcv *CDMObject) ZDot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Z-coordinate of the object's position in RTN
func (rcv *CDMObject) MutateZDot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(74, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CrR() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCrR(n float64) bool {
	return rcv._tab.MutateFloat64Slot(76, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CtR() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCtR(n float64) bool {
	return rcv._tab.MutateFloat64Slot(78, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CtT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCtT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(80, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CnR() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCnR(n float64) bool {
	return rcv._tab.MutateFloat64Slot(82, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CnT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCnT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(84, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CnN() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCnN(n float64) bool {
	return rcv._tab.MutateFloat64Slot(86, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CrdotR() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCrdotR(n float64) bool {
	return rcv._tab.MutateFloat64Slot(88, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CrdotT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCrdotT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(90, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CrdotN() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCrdotN(n float64) bool {
	return rcv._tab.MutateFloat64Slot(92, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CrdotRdot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCrdotRdot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(94, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CtdotR() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCtdotR(n float64) bool {
	return rcv._tab.MutateFloat64Slot(96, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CtdotT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCtdotT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(98, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CtdotN() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCtdotN(n float64) bool {
	return rcv._tab.MutateFloat64Slot(100, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CtdotRdot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCtdotRdot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(102, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CtdotTdot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCtdotTdot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(104, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CndotR() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCndotR(n float64) bool {
	return rcv._tab.MutateFloat64Slot(106, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CndotT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCndotT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(108, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CndotN() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCndotN(n float64) bool {
	return rcv._tab.MutateFloat64Slot(110, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CndotRdot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCndotRdot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(112, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CndotTdot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCndotTdot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(114, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CndotNdot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCndotNdot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(116, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CdrgR() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCdrgR(n float64) bool {
	return rcv._tab.MutateFloat64Slot(118, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CdrgT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCdrgT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(120, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CdrgN() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCdrgN(n float64) bool {
	return rcv._tab.MutateFloat64Slot(122, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CdrgRdot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCdrgRdot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(124, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CdrgTdot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCdrgTdot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(126, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CdrgNdot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCdrgNdot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(128, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CdrgDrg() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCdrgDrg(n float64) bool {
	return rcv._tab.MutateFloat64Slot(130, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CsrpR() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCsrpR(n float64) bool {
	return rcv._tab.MutateFloat64Slot(132, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CsrpT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCsrpT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(134, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CsrpN() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCsrpN(n float64) bool {
	return rcv._tab.MutateFloat64Slot(136, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CsrpRdot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(138))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCsrpRdot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(138, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CsrpTdot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(140))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCsrpTdot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(140, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CsrpNdot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(142))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCsrpNdot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(142, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CsrpDrg() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(144))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCsrpDrg(n float64) bool {
	return rcv._tab.MutateFloat64Slot(144, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CsrpSrp() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(146))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCsrpSrp(n float64) bool {
	return rcv._tab.MutateFloat64Slot(146, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CthrR() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(148))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCthrR(n float64) bool {
	return rcv._tab.MutateFloat64Slot(148, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CthrT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(150))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCthrT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(150, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CthrN() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(152))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCthrN(n float64) bool {
	return rcv._tab.MutateFloat64Slot(152, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CthrRdot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(154))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCthrRdot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(154, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CthrTdot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(156))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCthrTdot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(156, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CthrNdot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(158))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCthrNdot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(158, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CthrDrg() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(160))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCthrDrg(n float64) bool {
	return rcv._tab.MutateFloat64Slot(160, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CthrSrp() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(162))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCthrSrp(n float64) bool {
	return rcv._tab.MutateFloat64Slot(162, n)
}

/// Covariance Matrix component
func (rcv *CDMObject) CthrThr() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(164))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance Matrix component
func (rcv *CDMObject) MutateCthrThr(n float64) bool {
	return rcv._tab.MutateFloat64Slot(164, n)
}

func CDMObjectStart(builder *flatbuffers.Builder) {
	builder.StartObject(81)
}
func CDMObjectAddComment(builder *flatbuffers.Builder, comment flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(comment), 0)
}
func CDMObjectAddObject(builder *flatbuffers.Builder, object flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(object), 0)
}
func CDMObjectAddPoc(builder *flatbuffers.Builder, poc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(poc), 0)
}
func CDMObjectAddOperatorContactPosition(builder *flatbuffers.Builder, operatorContactPosition flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(operatorContactPosition), 0)
}
func CDMObjectAddOperatorOrganization(builder *flatbuffers.Builder, operatorOrganization flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(operatorOrganization), 0)
}
func CDMObjectAddEphemerisName(builder *flatbuffers.Builder, ephemerisName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(ephemerisName), 0)
}
func CDMObjectAddCovarianceMethod(builder *flatbuffers.Builder, covarianceMethod covarianceMethod) {
	builder.PrependInt8Slot(6, int8(covarianceMethod), 0)
}
func CDMObjectAddReferenceFrame(builder *flatbuffers.Builder, referenceFrame RFM.RefFrame) {
	builder.PrependInt8Slot(7, int8(referenceFrame), 0)
}
func CDMObjectAddGravityModel(builder *flatbuffers.Builder, gravityModel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(gravityModel), 0)
}
func CDMObjectAddAtmosphericModel(builder *flatbuffers.Builder, atmosphericModel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(atmosphericModel), 0)
}
func CDMObjectAddNBodyPerturbations(builder *flatbuffers.Builder, nBodyPerturbations flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(nBodyPerturbations), 0)
}
func CDMObjectAddSolarRadPressure(builder *flatbuffers.Builder, solarRadPressure bool) {
	builder.PrependBoolSlot(11, solarRadPressure, false)
}
func CDMObjectAddEarthTides(builder *flatbuffers.Builder, earthTides bool) {
	builder.PrependBoolSlot(12, earthTides, false)
}
func CDMObjectAddIntrackThrust(builder *flatbuffers.Builder, intrackThrust bool) {
	builder.PrependBoolSlot(13, intrackThrust, false)
}
func CDMObjectAddTimeLastobStart(builder *flatbuffers.Builder, timeLastobStart flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(timeLastobStart), 0)
}
func CDMObjectAddTimeLastobEnd(builder *flatbuffers.Builder, timeLastobEnd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(timeLastobEnd), 0)
}
func CDMObjectAddRecommendedOdSpan(builder *flatbuffers.Builder, recommendedOdSpan float64) {
	builder.PrependFloat64Slot(16, recommendedOdSpan, 0.0)
}
func CDMObjectAddActualOdSpan(builder *flatbuffers.Builder, actualOdSpan float64) {
	builder.PrependFloat64Slot(17, actualOdSpan, 0.0)
}
func CDMObjectAddObsAvailable(builder *flatbuffers.Builder, obsAvailable uint32) {
	builder.PrependUint32Slot(18, obsAvailable, 0)
}
func CDMObjectAddObsUsed(builder *flatbuffers.Builder, obsUsed uint32) {
	builder.PrependUint32Slot(19, obsUsed, 0)
}
func CDMObjectAddTracksAvailable(builder *flatbuffers.Builder, tracksAvailable uint32) {
	builder.PrependUint32Slot(20, tracksAvailable, 0)
}
func CDMObjectAddTracksUsed(builder *flatbuffers.Builder, tracksUsed uint32) {
	builder.PrependUint32Slot(21, tracksUsed, 0)
}
func CDMObjectAddResidualsAccepted(builder *flatbuffers.Builder, residualsAccepted float64) {
	builder.PrependFloat64Slot(22, residualsAccepted, 0.0)
}
func CDMObjectAddWeightedRms(builder *flatbuffers.Builder, weightedRms float64) {
	builder.PrependFloat64Slot(23, weightedRms, 0.0)
}
func CDMObjectAddAreaPc(builder *flatbuffers.Builder, areaPc float64) {
	builder.PrependFloat64Slot(24, areaPc, 0.0)
}
func CDMObjectAddAreaDrg(builder *flatbuffers.Builder, areaDrg float64) {
	builder.PrependFloat64Slot(25, areaDrg, 0.0)
}
func CDMObjectAddAreaSrp(builder *flatbuffers.Builder, areaSrp float64) {
	builder.PrependFloat64Slot(26, areaSrp, 0.0)
}
func CDMObjectAddCrAreaOverMass(builder *flatbuffers.Builder, crAreaOverMass float64) {
	builder.PrependFloat64Slot(27, crAreaOverMass, 0.0)
}
func CDMObjectAddThrustAcceleration(builder *flatbuffers.Builder, thrustAcceleration float64) {
	builder.PrependFloat64Slot(28, thrustAcceleration, 0.0)
}
func CDMObjectAddSedr(builder *flatbuffers.Builder, sedr float64) {
	builder.PrependFloat64Slot(29, sedr, 0.0)
}
func CDMObjectAddX(builder *flatbuffers.Builder, x float64) {
	builder.PrependFloat64Slot(30, x, 0.0)
}
func CDMObjectAddY(builder *flatbuffers.Builder, y float64) {
	builder.PrependFloat64Slot(31, y, 0.0)
}
func CDMObjectAddZ(builder *flatbuffers.Builder, z float64) {
	builder.PrependFloat64Slot(32, z, 0.0)
}
func CDMObjectAddXDot(builder *flatbuffers.Builder, xDot float64) {
	builder.PrependFloat64Slot(33, xDot, 0.0)
}
func CDMObjectAddYDot(builder *flatbuffers.Builder, yDot float64) {
	builder.PrependFloat64Slot(34, yDot, 0.0)
}
func CDMObjectAddZDot(builder *flatbuffers.Builder, zDot float64) {
	builder.PrependFloat64Slot(35, zDot, 0.0)
}
func CDMObjectAddCrR(builder *flatbuffers.Builder, crR float64) {
	builder.PrependFloat64Slot(36, crR, 0.0)
}
func CDMObjectAddCtR(builder *flatbuffers.Builder, ctR float64) {
	builder.PrependFloat64Slot(37, ctR, 0.0)
}
func CDMObjectAddCtT(builder *flatbuffers.Builder, ctT float64) {
	builder.PrependFloat64Slot(38, ctT, 0.0)
}
func CDMObjectAddCnR(builder *flatbuffers.Builder, cnR float64) {
	builder.PrependFloat64Slot(39, cnR, 0.0)
}
func CDMObjectAddCnT(builder *flatbuffers.Builder, cnT float64) {
	builder.PrependFloat64Slot(40, cnT, 0.0)
}
func CDMObjectAddCnN(builder *flatbuffers.Builder, cnN float64) {
	builder.PrependFloat64Slot(41, cnN, 0.0)
}
func CDMObjectAddCrdotR(builder *flatbuffers.Builder, crdotR float64) {
	builder.PrependFloat64Slot(42, crdotR, 0.0)
}
func CDMObjectAddCrdotT(builder *flatbuffers.Builder, crdotT float64) {
	builder.PrependFloat64Slot(43, crdotT, 0.0)
}
func CDMObjectAddCrdotN(builder *flatbuffers.Builder, crdotN float64) {
	builder.PrependFloat64Slot(44, crdotN, 0.0)
}
func CDMObjectAddCrdotRdot(builder *flatbuffers.Builder, crdotRdot float64) {
	builder.PrependFloat64Slot(45, crdotRdot, 0.0)
}
func CDMObjectAddCtdotR(builder *flatbuffers.Builder, ctdotR float64) {
	builder.PrependFloat64Slot(46, ctdotR, 0.0)
}
func CDMObjectAddCtdotT(builder *flatbuffers.Builder, ctdotT float64) {
	builder.PrependFloat64Slot(47, ctdotT, 0.0)
}
func CDMObjectAddCtdotN(builder *flatbuffers.Builder, ctdotN float64) {
	builder.PrependFloat64Slot(48, ctdotN, 0.0)
}
func CDMObjectAddCtdotRdot(builder *flatbuffers.Builder, ctdotRdot float64) {
	builder.PrependFloat64Slot(49, ctdotRdot, 0.0)
}
func CDMObjectAddCtdotTdot(builder *flatbuffers.Builder, ctdotTdot float64) {
	builder.PrependFloat64Slot(50, ctdotTdot, 0.0)
}
func CDMObjectAddCndotR(builder *flatbuffers.Builder, cndotR float64) {
	builder.PrependFloat64Slot(51, cndotR, 0.0)
}
func CDMObjectAddCndotT(builder *flatbuffers.Builder, cndotT float64) {
	builder.PrependFloat64Slot(52, cndotT, 0.0)
}
func CDMObjectAddCndotN(builder *flatbuffers.Builder, cndotN float64) {
	builder.PrependFloat64Slot(53, cndotN, 0.0)
}
func CDMObjectAddCndotRdot(builder *flatbuffers.Builder, cndotRdot float64) {
	builder.PrependFloat64Slot(54, cndotRdot, 0.0)
}
func CDMObjectAddCndotTdot(builder *flatbuffers.Builder, cndotTdot float64) {
	builder.PrependFloat64Slot(55, cndotTdot, 0.0)
}
func CDMObjectAddCndotNdot(builder *flatbuffers.Builder, cndotNdot float64) {
	builder.PrependFloat64Slot(56, cndotNdot, 0.0)
}
func CDMObjectAddCdrgR(builder *flatbuffers.Builder, cdrgR float64) {
	builder.PrependFloat64Slot(57, cdrgR, 0.0)
}
func CDMObjectAddCdrgT(builder *flatbuffers.Builder, cdrgT float64) {
	builder.PrependFloat64Slot(58, cdrgT, 0.0)
}
func CDMObjectAddCdrgN(builder *flatbuffers.Builder, cdrgN float64) {
	builder.PrependFloat64Slot(59, cdrgN, 0.0)
}
func CDMObjectAddCdrgRdot(builder *flatbuffers.Builder, cdrgRdot float64) {
	builder.PrependFloat64Slot(60, cdrgRdot, 0.0)
}
func CDMObjectAddCdrgTdot(builder *flatbuffers.Builder, cdrgTdot float64) {
	builder.PrependFloat64Slot(61, cdrgTdot, 0.0)
}
func CDMObjectAddCdrgNdot(builder *flatbuffers.Builder, cdrgNdot float64) {
	builder.PrependFloat64Slot(62, cdrgNdot, 0.0)
}
func CDMObjectAddCdrgDrg(builder *flatbuffers.Builder, cdrgDrg float64) {
	builder.PrependFloat64Slot(63, cdrgDrg, 0.0)
}
func CDMObjectAddCsrpR(builder *flatbuffers.Builder, csrpR float64) {
	builder.PrependFloat64Slot(64, csrpR, 0.0)
}
func CDMObjectAddCsrpT(builder *flatbuffers.Builder, csrpT float64) {
	builder.PrependFloat64Slot(65, csrpT, 0.0)
}
func CDMObjectAddCsrpN(builder *flatbuffers.Builder, csrpN float64) {
	builder.PrependFloat64Slot(66, csrpN, 0.0)
}
func CDMObjectAddCsrpRdot(builder *flatbuffers.Builder, csrpRdot float64) {
	builder.PrependFloat64Slot(67, csrpRdot, 0.0)
}
func CDMObjectAddCsrpTdot(builder *flatbuffers.Builder, csrpTdot float64) {
	builder.PrependFloat64Slot(68, csrpTdot, 0.0)
}
func CDMObjectAddCsrpNdot(builder *flatbuffers.Builder, csrpNdot float64) {
	builder.PrependFloat64Slot(69, csrpNdot, 0.0)
}
func CDMObjectAddCsrpDrg(builder *flatbuffers.Builder, csrpDrg float64) {
	builder.PrependFloat64Slot(70, csrpDrg, 0.0)
}
func CDMObjectAddCsrpSrp(builder *flatbuffers.Builder, csrpSrp float64) {
	builder.PrependFloat64Slot(71, csrpSrp, 0.0)
}
func CDMObjectAddCthrR(builder *flatbuffers.Builder, cthrR float64) {
	builder.PrependFloat64Slot(72, cthrR, 0.0)
}
func CDMObjectAddCthrT(builder *flatbuffers.Builder, cthrT float64) {
	builder.PrependFloat64Slot(73, cthrT, 0.0)
}
func CDMObjectAddCthrN(builder *flatbuffers.Builder, cthrN float64) {
	builder.PrependFloat64Slot(74, cthrN, 0.0)
}
func CDMObjectAddCthrRdot(builder *flatbuffers.Builder, cthrRdot float64) {
	builder.PrependFloat64Slot(75, cthrRdot, 0.0)
}
func CDMObjectAddCthrTdot(builder *flatbuffers.Builder, cthrTdot float64) {
	builder.PrependFloat64Slot(76, cthrTdot, 0.0)
}
func CDMObjectAddCthrNdot(builder *flatbuffers.Builder, cthrNdot float64) {
	builder.PrependFloat64Slot(77, cthrNdot, 0.0)
}
func CDMObjectAddCthrDrg(builder *flatbuffers.Builder, cthrDrg float64) {
	builder.PrependFloat64Slot(78, cthrDrg, 0.0)
}
func CDMObjectAddCthrSrp(builder *flatbuffers.Builder, cthrSrp float64) {
	builder.PrependFloat64Slot(79, cthrSrp, 0.0)
}
func CDMObjectAddCthrThr(builder *flatbuffers.Builder, cthrThr float64) {
	builder.PrependFloat64Slot(80, cthrThr, 0.0)
}
func CDMObjectEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
