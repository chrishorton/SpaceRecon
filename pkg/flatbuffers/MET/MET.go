// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package MET

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Mean Element Theory
type MET struct {
	_tab flatbuffers.Table
}

const METIdentifier = "$MET"

func GetRootAsMET(buf []byte, offset flatbuffers.UOffsetT) *MET {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MET{}
	x.Init(buf, n+offset)
	return x
}

func FinishMETBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(METIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func METBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, METIdentifier)
}

func GetSizePrefixedRootAsMET(buf []byte, offset flatbuffers.UOffsetT) *MET {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MET{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMETBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(METIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedMETBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, METIdentifier)
}

func (rcv *MET) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MET) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MET) GetMeanElementTheory() MeanElementTheory {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return MeanElementTheory(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MET) MutateMeanElementTheory(n MeanElementTheory) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func METStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func METAddMeanElementTheory(builder *flatbuffers.Builder, MeanElementTheory MeanElementTheory) {
	builder.PrependInt8Slot(0, int8(MeanElementTheory), 0)
}
func METEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
