// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package OEM

import (
	flatbuffers "github.com/google/flatbuffers/go"

	RFM "github.com/chrishorton/spacerecon/pkg/flatbuffers/RFM"
)

/// Position/Velocity Covariance Matrix Line
type covarianceMatrixLine struct {
	_tab flatbuffers.Table
}

func GetRootAscovarianceMatrixLine(buf []byte, offset flatbuffers.UOffsetT) *covarianceMatrixLine {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &covarianceMatrixLine{}
	x.Init(buf, n+offset)
	return x
}

func FinishcovarianceMatrixLineBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAscovarianceMatrixLine(buf []byte, offset flatbuffers.UOffsetT) *covarianceMatrixLine {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &covarianceMatrixLine{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedcovarianceMatrixLineBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *covarianceMatrixLine) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *covarianceMatrixLine) Table() flatbuffers.Table {
	return rcv._tab
}

/// Epoch
func (rcv *covarianceMatrixLine) Epoch() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Epoch
/// Reference frame for the covariance matrix
func (rcv *covarianceMatrixLine) CovReferenceFrame() RFM.RefFrame {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return RFM.RefFrame(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Reference frame for the covariance matrix
func (rcv *covarianceMatrixLine) MutateCovReferenceFrame(n RFM.RefFrame) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

/// Covariance matrix [1,1] km**2
func (rcv *covarianceMatrixLine) CxX() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance matrix [1,1] km**2
func (rcv *covarianceMatrixLine) MutateCxX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// Covariance matrix [2,1] km**2
func (rcv *covarianceMatrixLine) CyX() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance matrix [2,1] km**2
func (rcv *covarianceMatrixLine) MutateCyX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// Covariance matrix [2,2] km**2
func (rcv *covarianceMatrixLine) CyY() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance matrix [2,2] km**2
func (rcv *covarianceMatrixLine) MutateCyY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// Covariance matrix [3,1] km**2
func (rcv *covarianceMatrixLine) CzX() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance matrix [3,1] km**2
func (rcv *covarianceMatrixLine) MutateCzX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// Covariance matrix [3,2] km**2
func (rcv *covarianceMatrixLine) CzY() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance matrix [3,2] km**2
func (rcv *covarianceMatrixLine) MutateCzY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// Covariance matrix [3,3] km**2
func (rcv *covarianceMatrixLine) CzZ() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance matrix [3,3] km**2
func (rcv *covarianceMatrixLine) MutateCzZ(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// Covariance matrix [4,1] km**2/s
func (rcv *covarianceMatrixLine) CxDotX() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance matrix [4,1] km**2/s
func (rcv *covarianceMatrixLine) MutateCxDotX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Covariance matrix [4,2] km**2/s
func (rcv *covarianceMatrixLine) CxDotY() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance matrix [4,2] km**2/s
func (rcv *covarianceMatrixLine) MutateCxDotY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Covariance matrix [4,3] km**2/s
func (rcv *covarianceMatrixLine) CxDotZ() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance matrix [4,3] km**2/s
func (rcv *covarianceMatrixLine) MutateCxDotZ(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// Covariance matrix [4,4] km**2/s**2
func (rcv *covarianceMatrixLine) CxDotXDot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance matrix [4,4] km**2/s**2
func (rcv *covarianceMatrixLine) MutateCxDotXDot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// Covariance matrix [5,1] km**2/s
func (rcv *covarianceMatrixLine) CyDotX() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance matrix [5,1] km**2/s
func (rcv *covarianceMatrixLine) MutateCyDotX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Covariance matrix [5,2] km**2/s
func (rcv *covarianceMatrixLine) CyDotY() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance matrix [5,2] km**2/s
func (rcv *covarianceMatrixLine) MutateCyDotY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Covariance matrix [5,3] km**2/s
func (rcv *covarianceMatrixLine) CyDotZ() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance matrix [5,3] km**2/s
func (rcv *covarianceMatrixLine) MutateCyDotZ(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Covariance matrix [5,4] km**2/s**2
func (rcv *covarianceMatrixLine) CyDotXDot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance matrix [5,4] km**2/s**2
func (rcv *covarianceMatrixLine) MutateCyDotXDot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Covariance matrix [5,5] km**2/s**2
func (rcv *covarianceMatrixLine) CyDotYDot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance matrix [5,5] km**2/s**2
func (rcv *covarianceMatrixLine) MutateCyDotYDot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Covariance matrix [6,1] km**2/s
func (rcv *covarianceMatrixLine) CzDotX() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance matrix [6,1] km**2/s
func (rcv *covarianceMatrixLine) MutateCzDotX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// Covariance matrix [6,2] km**2/s
func (rcv *covarianceMatrixLine) CzDotY() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance matrix [6,2] km**2/s
func (rcv *covarianceMatrixLine) MutateCzDotY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Covariance matrix [6,3] km**2/s
func (rcv *covarianceMatrixLine) CzDotZ() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance matrix [6,3] km**2/s
func (rcv *covarianceMatrixLine) MutateCzDotZ(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// Covariance matrix [6,4] km**2/s**2
func (rcv *covarianceMatrixLine) CzDotXDot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance matrix [6,4] km**2/s**2
func (rcv *covarianceMatrixLine) MutateCzDotXDot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// Covariance matrix [6,5] km**2/s**2
func (rcv *covarianceMatrixLine) CzDotYDot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance matrix [6,5] km**2/s**2
func (rcv *covarianceMatrixLine) MutateCzDotYDot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Covariance matrix [6,6] km**2/s**2
func (rcv *covarianceMatrixLine) CzDotZDot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance matrix [6,6] km**2/s**2
func (rcv *covarianceMatrixLine) MutateCzDotZDot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

func covarianceMatrixLineStart(builder *flatbuffers.Builder) {
	builder.StartObject(23)
}
func covarianceMatrixLineAddEpoch(builder *flatbuffers.Builder, epoch flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(epoch), 0)
}
func covarianceMatrixLineAddCovReferenceFrame(builder *flatbuffers.Builder, covReferenceFrame RFM.RefFrame) {
	builder.PrependInt8Slot(1, int8(covReferenceFrame), 0)
}
func covarianceMatrixLineAddCxX(builder *flatbuffers.Builder, cxX float64) {
	builder.PrependFloat64Slot(2, cxX, 0.0)
}
func covarianceMatrixLineAddCyX(builder *flatbuffers.Builder, cyX float64) {
	builder.PrependFloat64Slot(3, cyX, 0.0)
}
func covarianceMatrixLineAddCyY(builder *flatbuffers.Builder, cyY float64) {
	builder.PrependFloat64Slot(4, cyY, 0.0)
}
func covarianceMatrixLineAddCzX(builder *flatbuffers.Builder, czX float64) {
	builder.PrependFloat64Slot(5, czX, 0.0)
}
func covarianceMatrixLineAddCzY(builder *flatbuffers.Builder, czY float64) {
	builder.PrependFloat64Slot(6, czY, 0.0)
}
func covarianceMatrixLineAddCzZ(builder *flatbuffers.Builder, czZ float64) {
	builder.PrependFloat64Slot(7, czZ, 0.0)
}
func covarianceMatrixLineAddCxDotX(builder *flatbuffers.Builder, cxDotX float64) {
	builder.PrependFloat64Slot(8, cxDotX, 0.0)
}
func covarianceMatrixLineAddCxDotY(builder *flatbuffers.Builder, cxDotY float64) {
	builder.PrependFloat64Slot(9, cxDotY, 0.0)
}
func covarianceMatrixLineAddCxDotZ(builder *flatbuffers.Builder, cxDotZ float64) {
	builder.PrependFloat64Slot(10, cxDotZ, 0.0)
}
func covarianceMatrixLineAddCxDotXDot(builder *flatbuffers.Builder, cxDotXDot float64) {
	builder.PrependFloat64Slot(11, cxDotXDot, 0.0)
}
func covarianceMatrixLineAddCyDotX(builder *flatbuffers.Builder, cyDotX float64) {
	builder.PrependFloat64Slot(12, cyDotX, 0.0)
}
func covarianceMatrixLineAddCyDotY(builder *flatbuffers.Builder, cyDotY float64) {
	builder.PrependFloat64Slot(13, cyDotY, 0.0)
}
func covarianceMatrixLineAddCyDotZ(builder *flatbuffers.Builder, cyDotZ float64) {
	builder.PrependFloat64Slot(14, cyDotZ, 0.0)
}
func covarianceMatrixLineAddCyDotXDot(builder *flatbuffers.Builder, cyDotXDot float64) {
	builder.PrependFloat64Slot(15, cyDotXDot, 0.0)
}
func covarianceMatrixLineAddCyDotYDot(builder *flatbuffers.Builder, cyDotYDot float64) {
	builder.PrependFloat64Slot(16, cyDotYDot, 0.0)
}
func covarianceMatrixLineAddCzDotX(builder *flatbuffers.Builder, czDotX float64) {
	builder.PrependFloat64Slot(17, czDotX, 0.0)
}
func covarianceMatrixLineAddCzDotY(builder *flatbuffers.Builder, czDotY float64) {
	builder.PrependFloat64Slot(18, czDotY, 0.0)
}
func covarianceMatrixLineAddCzDotZ(builder *flatbuffers.Builder, czDotZ float64) {
	builder.PrependFloat64Slot(19, czDotZ, 0.0)
}
func covarianceMatrixLineAddCzDotXDot(builder *flatbuffers.Builder, czDotXDot float64) {
	builder.PrependFloat64Slot(20, czDotXDot, 0.0)
}
func covarianceMatrixLineAddCzDotYDot(builder *flatbuffers.Builder, czDotYDot float64) {
	builder.PrependFloat64Slot(21, czDotYDot, 0.0)
}
func covarianceMatrixLineAddCzDotZDot(builder *flatbuffers.Builder, czDotZDot float64) {
	builder.PrependFloat64Slot(22, czDotZDot, 0.0)
}
func covarianceMatrixLineEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
