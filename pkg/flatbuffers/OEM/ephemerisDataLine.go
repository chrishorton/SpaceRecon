// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package OEM

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// A single ephemeris data line
type ephemerisDataLine struct {
	_tab flatbuffers.Table
}

func GetRootAsephemerisDataLine(buf []byte, offset flatbuffers.UOffsetT) *ephemerisDataLine {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ephemerisDataLine{}
	x.Init(buf, n+offset)
	return x
}

func FinishephemerisDataLineBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsephemerisDataLine(buf []byte, offset flatbuffers.UOffsetT) *ephemerisDataLine {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ephemerisDataLine{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedephemerisDataLineBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ephemerisDataLine) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ephemerisDataLine) Table() flatbuffers.Table {
	return rcv._tab
}

/// Epoch time, in ISO 8601 UTC format
func (rcv *ephemerisDataLine) Epoch() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Epoch time, in ISO 8601 UTC format
/// Position vector X-component km
func (rcv *ephemerisDataLine) X() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Position vector X-component km
func (rcv *ephemerisDataLine) MutateX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// Position vector Y-component km
func (rcv *ephemerisDataLine) Y() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Position vector Y-component km
func (rcv *ephemerisDataLine) MutateY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// Position vector Z-component km
func (rcv *ephemerisDataLine) Z() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Position vector Z-component km
func (rcv *ephemerisDataLine) MutateZ(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// Velocity vector X-component km/s
func (rcv *ephemerisDataLine) XDot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Velocity vector X-component km/s
func (rcv *ephemerisDataLine) MutateXDot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// Velocity vector Y-component km/s
func (rcv *ephemerisDataLine) YDot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Velocity vector Y-component km/s
func (rcv *ephemerisDataLine) MutateYDot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// Velocity vector Z-component km/s
func (rcv *ephemerisDataLine) ZDot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Velocity vector Z-component km/s
func (rcv *ephemerisDataLine) MutateZDot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// Optional: Acceleration vector X-component km/s/s
func (rcv *ephemerisDataLine) XDdot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Optional: Acceleration vector X-component km/s/s
func (rcv *ephemerisDataLine) MutateXDdot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// Optional: Acceleration vector Y-component km/s/s
func (rcv *ephemerisDataLine) YDdot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Optional: Acceleration vector Y-component km/s/s
func (rcv *ephemerisDataLine) MutateYDdot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Optional: Acceleration vector Z-component km/s/s
func (rcv *ephemerisDataLine) ZDdot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Optional: Acceleration vector Z-component km/s/s
func (rcv *ephemerisDataLine) MutateZDdot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

func ephemerisDataLineStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func ephemerisDataLineAddEpoch(builder *flatbuffers.Builder, epoch flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(epoch), 0)
}
func ephemerisDataLineAddX(builder *flatbuffers.Builder, x float64) {
	builder.PrependFloat64Slot(1, x, 0.0)
}
func ephemerisDataLineAddY(builder *flatbuffers.Builder, y float64) {
	builder.PrependFloat64Slot(2, y, 0.0)
}
func ephemerisDataLineAddZ(builder *flatbuffers.Builder, z float64) {
	builder.PrependFloat64Slot(3, z, 0.0)
}
func ephemerisDataLineAddXDot(builder *flatbuffers.Builder, xDot float64) {
	builder.PrependFloat64Slot(4, xDot, 0.0)
}
func ephemerisDataLineAddYDot(builder *flatbuffers.Builder, yDot float64) {
	builder.PrependFloat64Slot(5, yDot, 0.0)
}
func ephemerisDataLineAddZDot(builder *flatbuffers.Builder, zDot float64) {
	builder.PrependFloat64Slot(6, zDot, 0.0)
}
func ephemerisDataLineAddXDdot(builder *flatbuffers.Builder, xDdot float64) {
	builder.PrependFloat64Slot(7, xDdot, 0.0)
}
func ephemerisDataLineAddYDdot(builder *flatbuffers.Builder, yDdot float64) {
	builder.PrependFloat64Slot(8, yDdot, 0.0)
}
func ephemerisDataLineAddZDdot(builder *flatbuffers.Builder, zDdot float64) {
	builder.PrependFloat64Slot(9, zDdot, 0.0)
}
func ephemerisDataLineEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
